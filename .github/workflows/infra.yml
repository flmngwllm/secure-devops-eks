name: Terraform Infrastructure 
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
      branches:
      - main
      paths:
      - 'terraform/**'
  workflow_dispatch:

env: 
  TF_WORKING_DIR: ./terraform
  PUBLIC_ACCESS_CIDRS: '["0.0.0.0/0"]'
  ACTIONS_ROLE_ARN: ${{ secrets.ACTIONS_ROLE_ARN }}
  SSH_KEY_NAME: ${{ secrets.SSH_KEY_NAME }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.tf-output.outputs.vpc_id }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:  
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: us-east-1
      
      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          echo "CIDRS: $PUBLIC_ACCESS_CIDRS"
          terraform plan -no-color -out=tfplan -input=false \
            -var='public_access_cidrs=["0.0.0.0/0"]' \
            -var="github_actions_role_arn=${ACTIONS_ROLE_ARN}" \
            -var="ssh_key_name=${SSH_KEY_NAME}" || exit 1
      
      - name: Terraform Apply 
        if: github.event_name != 'pull_request'
        run: |
          terraform apply -auto-approve -input=false \
            -var='public_access_cidrs=["0.0.0.0/0"]' \
            -var="github_actions_role_arn=${ACTIONS_ROLE_ARN}" \
            -var="ssh_key_name=${SSH_KEY_NAME}" || exit 1
      
      - name: Output VPC ID
        id: tf-output
        run: |
          VPC_ID=$(terraform output -raw vpc_id)
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Test cluster access
        run: |
          echo "Testing if assumed GitHub Actions role can access EKS..."
          aws eks describe-cluster --name secure_cluster --region us-east-1

      - name: Debug Access Policy Association
        run: |
          echo "Current policy associations:"
          aws eks describe-access-entry \
            --cluster-name secure_cluster \
            --principal-arn ${{ secrets.ACTIONS_ROLE_ARN }} \
            --region us-east-1

      - name: Brief wait to ensure access propagation
        run: sleep 30

      - name: Wait for EKS Cluster readiness
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for EKS cluster to be active..."
          aws eks wait cluster-active --name secure_cluster --region us-east-1
          echo "Waiting for node group to be ready..."
          aws eks wait nodegroup-active --cluster-name secure_cluster --nodegroup-name secure_devops_node_group --region us-east-1

      - name: Kubernetes kubeconfig
        if: github.event_name != 'pull_request'
        run: |
          aws eks --region us-east-1 update-kubeconfig --name secure_cluster
        
      - name: Github SHA
        if: github.event_name != 'pull_request'
        run: echo "${GITHUB_SHA}" > commit_sha.txt

      - name: Upload commit SHA as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: commit-sha
          path: terraform/commit_sha.txt



    